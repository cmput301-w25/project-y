@startuml

skinparam classAttributeIconSize 0
skinparam linetype ortho
left to right direction
skinparam nodesep 100
skinparam ranksep 100
skinparam padding 5

class MoodFilterView{
    - controller: MoodListController
    + initializeFilter(MoodListController)
    - initializeLayout(Context)
    - initializeMinDateFilter()
    - initializeMaxDateFilter()
    - initializeEmotionSpinner()
    - initializeReasonWhyKeywordFilter()
    - showDatePickerDialog(Timestamp, DatePickerDialog.OnDateSetListener)
}

class FollowRequestsActivity {
    - controller : FollowRequestController
    - NoFollowRequests : TextView
    + setvisible()
    + setnotvisible()
    # onCreate(Bundle)
    # getActivityLayout() : int
}
FollowRequestsActivity --|> BaseActivity

class MoodImageCache {
    - {static} instance : MoodImageCache
    - cache : HashMap<String, Bitmap>
    - MoodImageCache()
    + {static} getInstance() : MoodImageCache
    + put(String, Bitmap)
    + remove(String)
    + getBitmap(String) : Bitmap
    + hasCachedImage(String) : boolean
}

class MoodHistoryController {
    - poster : String
    + MoodHistoryController(Context, String, OnSuccessListener<Void>, OnFailureListener)
    + doesBelongInOriginal(MoodEvent) : boolean
    + isPosterAllowed(String) : boolean
}
MoodHistoryController --|> MoodListController

class MoodEvent {
    + {static} CREATOR : Creator<MoodEvent>
    - id : String
    - creationDateTime : Timestamp
    - posterUsername : String
    - dateTime : Timestamp
    - emotion : Emotion
    - isPrivate : Boolean
    - socialSituation : SocialSituation

    - text : String
    - photoURL : String
    - location : GeoPoint
    + MoodEvent()
    + MoodEvent(String, Timestamp, String, Timestamp, Emotion)
    # MoodEvent(Parcel)
    + getId() : String
    + setId(String)
    + getCreationDateTime() : Timestamp
    + setCreationDateTime(Timestamp)
    + getDateTime() : Timestamp
    + setDateTime(Timestamp)
    + getPosterUsername() : String
    + setPosterUsername(String)
    + getEmotion() : Emotion
    + setEmotion(Emotion)
    + getSocialSituation() : SocialSituation
    + setSocialSituation(SocialSituation)
    + getText() : String
    + setText(String)
    + getPhotoURL() : String
    + setPhotoURL(String)
    + getLocation() : GeoPoint
    + setLocation(GeoPoint)
    + getIsPrivate() : Boolean
    + setIsPrivate(Boolean)
    + getStability() : int
    + describeContents() : int
    + writeToParcel(Parcel, int)
    + equals(Object) : boolean
    + hashCode() : int
    + toString() : String
}

class FollowRequestRepository {
    - {static} instance : FollowRequestRepository
    + {static} FOLLOW_REQ_COLLECTION : String
    - db : FirebaseFirestore
    - followReqsRef : CollectionReference
    - FollowRequestRepository()
    - FollowRequestRepository(FirebaseFirestore)
    + {static} getInstance() : FollowRequestRepository
    - startListening()
    + {static} setInstanceForTesting(FirebaseFirestore)
    + addFollowRequest(FollowRequest, OnSuccessListener<FollowRequest>, OnFailureListener)
    + getFollowRequest(String, String, OnSuccessListener<FollowRequest>, OnFailureListener)
    + deleteFollowRequest(String, String, OnSuccessListener<Void>, OnFailureListener)
    + didRequest(String, String, OnSuccessListener<Boolean>, OnFailureListener)
    + acceptRequest(FollowRequest, OnSuccessListener<Follow>, OnFailureListener)
    + getAllRequestsTo(String, OnSuccessListener<ArrayList<FollowRequest>>, OnFailureListener)
    + getAllRequestsFrom(String, OnSuccessListener<ArrayList<FollowRequest>>, OnFailureListener)
    - getCompoundId(String, String) : String
    - onFollowRequestAdded(FollowRequest)
    - onFollowRequestDeleted(String, String)
}
FollowRequestRepository --|> GenericRepository

class LoginActivity {
    - usernameEditText : EditText
    - loginController : LoginController
    # onCreate(Bundle)
    - loginUser()
}

class LocationController {
    - activity : Activity
    - fusedLocationProviderClient : FusedLocationProviderClient
    - permissionLauncher : ActivityResultLauncher<String>
    - locationCallback : LocationCallback
    + LocationController(Activity)
    + getCurrentLocation(LocationCallback)
    - fetchLocationInternal()
}

class UpdateOrDeleteMoodEventActivity {
    - imageCache : LruCache<String,Bitmap>
    - spinnerMood : Spinner
    - spinnerSocial : Spinner
    - checkShareLocation : CheckBox
    - privateCheckbox : CheckBox
    - moodTextEditText : EditText
    - updateOrDeleteMoodEventController : UpdateOrDeleteMoodEventController
    - locationController : LocationController
    - photoImgView : ImageView
    - {static} LOCATION_PERMISSION_REQUEST_CODE : int
    # onCreate(Bundle)
    - onUpdateMoodEvent(MoodEvent)
    - onDeleteMoodEvent(MoodEvent)
    - initializeBorderColors()
    + onRequestPermissionsResult(int, String[], int[])
    - handleException(Exception)
}

class FollowingMoodEventListActivity {
    # onCreate(Bundle)
}
FollowingMoodEventListActivity --|> MoodListActivity

class UserRepository {
    - {static} instance : UserRepository
    - db : FirebaseFirestore
    + {static} USER_COLLECTION : String
    - usersRef : CollectionReference
    - UserRepository()
    + UserRepository(FirebaseFirestore)
    + {static} getInstance() : UserRepository
    + {static} setInstanceForTesting(FirebaseFirestore)
    - startListening()
    + addUser(User, OnSuccessListener<User>, OnFailureListener)
    + doesUserExist(String, OnSuccessListener<User>, OnFailureListener)
    + getUser(String, OnSuccessListener<User>, OnFailureListener)
    + getFollowing(String, OnSuccessListener<ArrayList<String>>, OnFailureListener)
    + getFollowingMoodList(ArrayList<String>, OnSuccessListener<ArrayList<MoodEvent>>, OnFailureListener)
    + getFollowedPublicMoodEventsWithLocation(String, OnSuccessListener<ArrayList<MoodEvent>>, OnFailureListener)
    + getFollowStatusHashMap(String, OnSuccessListener<HashMap<String,FollowStatus>>, OnFailureListener)
    + getFollowerCount(String, OnSuccessListener<Integer>, OnFailureListener)
    + getAllUsers(OnSuccessListener<ArrayList<User>>, OnFailureListener)
    + getMostRecentEmotionFrom(String, OnSuccessListener<Emotion>, OnFailureListener)
    + isUserSad(String, OnSuccessListener<Boolean>, OnFailureListener)
    - onUserAdded(User)
}
UserRepository --|> GenericRepository

class LoginController {
    - authManager : AuthManager
    + LoginController()
    + LoginController(Context)
    + onLoginUser(String, String, OnSuccessListener<User>, OnFailureListener)
    + setAuthManager(AuthManager)
}

class ImageViewScrolling {
    - currentImage : ImageView
    - nextImage : ImageView
    - oldValue : int
    - eventEnd : SpinEventEndListener
    + ImageViewScrolling(Context)
    + ImageViewScrolling(Context, AttributeSet)
    - init(Context)
    + setValueRandom(int, int)
    - setImage(ImageView, int)
    + getValue() : int
    + setEventEnd(SpinEventEndListener)
}

class DiscoverActivity {
    # onCreate(Bundle)
}
DiscoverActivity --|> MoodListActivity

class PersonalJournalController {
    + PersonalJournalController(Context, OnSuccessListener<Void>, OnFailureListener)
    + doesBelongInOriginal(MoodEvent) : boolean
    + isPosterAllowed(String) : boolean
}
PersonalJournalController --|> MoodListController

class FollowButton {
    - context : Context
    - loggedInUser : String
    - profileUser : String
    - followStatus : UserRepository.FollowStatus
    + FollowButton(Context, AttributeSet)
    + initialize(String, UserRepository.FollowStatus)
    - setStyles()
    - onClick(View)
    + hide()
    - handleException(Exception)
    + setFollowStatus(UserRepository.FollowStatus)
    + getFollowStatus() : UserRepository.FollowStatus
}

class MoodEventRepository {
    - {static} instance : MoodEventRepository
    + {static} MOOD_EVENT_COLLECTION : String
    + {static} MOOD_PHOTO_STORAGE_NAME : String
    - db : FirebaseFirestore
    - moodEventRef : CollectionReference
    - MoodEventRepository()
    - MoodEventRepository(FirebaseFirestore)
    + {static} getInstance() : MoodEventRepository
    - startListening()
    + {static} setInstanceForTesting(FirebaseFirestore)
    # isNetworkAvailable(Context) : boolean
    + addMoodEvent(MoodEvent, OnSuccessListener<MoodEvent>, OnFailureListener)
    + getMoodEvent(String, OnSuccessListener<MoodEvent>, OnFailureListener)
    + updateMoodEvent(MoodEvent, Context, OnSuccessListener<MoodEvent>, OnFailureListener)
    + updateMoodEvent(MoodEvent, OnSuccessListener<MoodEvent>, OnFailureListener)
    + deleteMoodEvent(String, Context, OnSuccessListener<String>, OnFailureListener)
    + deleteMoodEvent(String, OnSuccessListener<String>, OnFailureListener)
    + getAllPublicMoodEvents(OnSuccessListener<ArrayList<MoodEvent>>, OnFailureListener)
    + getAllPublicMoodEventsFrom(String, OnSuccessListener<ArrayList<MoodEvent>>, OnFailureListener)
    + getAllMoodEventsFrom(String, OnSuccessListener<ArrayList<MoodEvent>>, OnFailureListener)
    + getRecentPublicMoodEventsFrom(String, OnSuccessListener<ArrayList<MoodEvent>>, OnFailureListener)
    + getAllPrivateMoodEventsFrom(String, OnSuccessListener<ArrayList<MoodEvent>>, OnFailureListener)
    + uploadAndAttachImage(MoodEvent, Uri, OnSuccessListener<MoodEvent>, OnFailureListener)
    + downloadImage(String, OnSuccessListener<Bitmap>, OnFailureListener)
    - onMoodEventAdded(MoodEvent)
    - onMoodEventUpdated(MoodEvent)
    - onMoodEventDeleted(String)
}
MoodEventRepository --|> GenericRepository

class SearchResultArrayAdapter {
    - context : Context
    - users : ArrayList<User>
    - followStatus : HashMap<String,UserRepository.FollowStatus>
    - emotionCache : HashMap<String,Emotion>
    + SearchResultArrayAdapter(Context, ArrayList<User>, HashMap<String,UserRepository.FollowStatus>)
    + getView(int, View, ViewGroup) : View
    + followStatusPut(String, UserRepository.FollowStatus)
}

class SearchController {
    - context : Context
    - session : SessionManager
    - allUsers : ArrayList<User>
    - searchResult : ArrayList<User>
    - adapter : SearchResultArrayAdapter
    - followStatus : HashMap<String,UserRepository.FollowStatus>
    + SearchController(Context)
    + initializeAdapter(OnSuccessListener<Void>, OnFailureListener)
    + searchUsers(String)
    + onUserAdded(User)
    + onFollowAdded(Follow)
    + onFollowDeleted(String, String)
    + onFollowRequestAdded(FollowRequest)
    + onFollowRequestDeleted(String, String)
    + getAdapter() : SearchResultArrayAdapter
    # notifyAdapter()
}
SearchController ..|> UserListener
SearchController ..|> FollowListener
SearchController ..|> FollowRequestListener

class User {
    - username : String
    - hashedPassword : String
    - name : String
    - email : String
    - joinDateTime : Timestamp
    + User()
    + User(String, String, String, String)
    + User(String, String, String, String, Timestamp)
    + getUsername() : String
    + setUsername(String)
    + getHashedPassword() : String
    + setHashedPassword(String)
    + getName() : String
    + setName(String)
    + getEmail() : String
    + setEmail(String)
    + getJoinDateTime() : Timestamp
    + setJoinDateTime(Timestamp)
}

class Comment {
    - id : String
    - moodEventId : String
    - timestamp : Timestamp
    - posterUsername : String
    - text : String
    + Comment()
    + getId() : String
    + setId(String)
    + getMoodEventId() : String
    + setMoodEventId(String)
    + getTimestamp() : Timestamp
    + setTimestamp(Timestamp)
    + getPosterUsername() : String
    + setPosterUsername(String)
    + getText() : String
    + setText(String)
}

class UserProfileActivity {
    - controller : MoodListController
    - followButton : FollowButton
    - session : SessionManager
    - targetUser : String
    - followerCountTv : TextView
    - moodListView : MoodListView
    - backBtn : ImageButton
    # onCreate(Bundle)
    # getActivityLayout() : int
    + onFollowAdded(Follow)
    + onFollowDeleted(String, String)
    - initMyProfile()
    + onFollowRequestAdded(FollowRequest)
    + onFollowRequestDeleted(String, String)
}
UserProfileActivity ..|> FollowListener
UserProfileActivity ..|> FollowRequestListener
UserProfileActivity --|> BaseActivity

class BaseActivity {
    - MOOD_FOLLOWING_LIST_UNSELECTED : Drawable
    - MOOD_FOLLOWING_LIST_SELECTED : Drawable
    - DISCOVER_UNSELECTED : Drawable
    - DISCOVER_SELECTED : Drawable
    - SEARCH_UNSELECTED : Drawable
    - SEARCH_SELECTED : Drawable
    - MAP_UNSELECTED : Drawable
    - MAP_SELECTED : Drawable
    - PROFILE_UNSELECTED : Drawable
    - PROFILE_SELECTED : Drawable
    - moodFollowingListBtn : ImageButton
    - discoverBtn : ImageButton
    - searchBtn : ImageButton
    - mapBtn : ImageButton
    - profileBtn : ImageButton
    # onCreate(Bundle)
    # {abstract} getActivityLayout() : int
    # deselectAllHeaderButtons()
    # selectMoodFollowingListHeaderButton()
    # selectDiscoverHeaderButton()
    # selectSearchHeaderButton()
    # selectMapHeaderButton()
    # selectProfileHeaderButton()
}

class FollowRequest {
    - requester : String
    - requestee : String
    - timestamp : Timestamp
    + FollowRequest()
    + FollowRequest(String, String, Timestamp)
    + getRequester() : String
    + setRequester(String)
    + getRequestee() : String
    + setRequestee(String)
    + getTimestamp() : Timestamp
    + setTimestamp(Timestamp)
}

class FollowRequestController {
    - user : String
    - context : Context
    - adapter : FollowRequestArrayAdapter
    - reqs : ArrayList<FollowRequest>
    + FollowRequestController()
    + FollowRequestController(Context, OnSuccessListener<Void>, OnFailureListener)
    + onFollowRequestAdded(FollowRequest)
    + onFollowRequestDeleted(String, String)
    # insertReq(FollowRequest)
    - notifyAdapter()
    + getAdapter() : FollowRequestArrayAdapter
    + getReqs() : ArrayList<FollowRequest>
    + setReqs(ArrayList<FollowRequest>)
    - updateEmptyState()
}
FollowRequestController ..|> FollowRequestListener

class LocationMoodController {
    - session : SessionManager
    - userRepo : UserRepository
    - moodEventRepo : MoodEventRepository
    + LocationMoodController(Context)
    + getMoodEventsWithLocation(OnSuccessListener<ArrayList<MoodEvent>>, OnFailureListener)
    + getMoodEventsWithLocationAndFollowed(OnSuccessListener<ArrayList<MoodEvent>>, OnFailureListener)
    + getMoodEventWithin5kmFromUser(Location, OnSuccessListener<ArrayList<MoodEvent>>, OnFailureListener)
    - isWithin5km(MoodEvent, Location) : boolean
    - haversine(double, double, double, double) : double
}

class DiscoverController {
    + DiscoverController(Context, OnSuccessListener<Void>, OnFailureListener)
    + doesBelongInOriginal(MoodEvent) : boolean
    + isPosterAllowed(String) : boolean
}
DiscoverController --|> MoodListController

class SignUpController {
    - authManager : AuthManager
    + SignUpController()
    + SignUpController(Context)
    + onSignUpUser(String, String, String, String, String, String, OnSuccessListener<User>, OnFailureListener)
}

class MoodAddActivity {
    - {static} TAG : String
    - {static} SELECT_PICTURE : int
    - addMoodController : AddMoodController
    - locationController : LocationController
    - session : SessionManager
    - spinnerMood : Spinner
    - spinnerSocial : Spinner
    - checkShareLocation : CheckBox
    - privateCheckBox : CheckBox
    - etReasonWhyText : EditText
    - datePicked : EditText
    - btnInsertImage : ImageButton
    - btnSubmit : Button
    - selectedImageUri : Uri
    - socialSituation : SocialSituation
    # onCreate(Bundle)
    - initViews()
    - setupMoodSpinner()
    - setupSocialSpinner()
    - setupDatePicker()
    - setupListeners()
    - handleSubmit()
    - submitMood(MoodEvent)
    # onActivityResult(int, int, Intent)
}

class CommentArrayAdapter {
    - context : Context
    - commentsForMoodEvent : ArrayList<Comment>
    + CommentArrayAdapter(Context, ArrayList<Comment>)
    + getView(int, View, ViewGroup) : View
}

class SearchActivity {
    - controller : SearchController
    # onCreate(Bundle)
    # getActivityLayout() : int
}
SearchActivity --|> BaseActivity

class MapActivity {
    - mMap : GoogleMap
    - spinnerOptions : Spinner
    - locationMoodController : LocationMoodController
    - locationController : LocationController
    - {static} TAG : String
    # onCreate(Bundle)
    + onMapReady(GoogleMap)
    - updateMapMarkers(int)
    - drawMarkers(ArrayList<MoodEvent>)
    - getBitmapFromView(View) : Bitmap
    # getActivityLayout() : int
}
MapActivity --|> BaseActivity

class SignUpActivity {
    - signUpController : SignUpController
    - nameField : EditText
    - emailField : EditText
    - confirmEmailField : EditText
    - usernameField : EditText
    - passwordField : EditText
    - confirmPasswordField : EditText
    # onCreate(Bundle)
    - signUpUser()
}

class MoodEventArrayAdapter {
    - isUsernameActive : boolean
    - moodEvents : ArrayList<MoodEvent>
    - context : Context
    - followStatus : HashMap<String,UserRepository.FollowStatus>
    - imageCache : LruCache<String,Bitmap>
    + MoodEventArrayAdapter(Context, ArrayList<MoodEvent>, HashMap<String,UserRepository.FollowStatus>)
    + getView(int, View, ViewGroup) : View
    + getItemViewType(int) : int
    + getViewTypeCount() : int
    - handleException(Exception)
    + followStatusPut(String, UserRepository.FollowStatus)
    + deactivateUsernames()
}

class SlotMachineActivity {
    - spinBtn : Button
    - image : ImageViewScrolling
    - image2 : ImageViewScrolling
    - image3 : ImageViewScrolling
    - textScore : TextView
    - countDone : int
    - score : int
    # onCreate(Bundle)
    + onSpinFinish(int, int)
}
SlotMachineActivity ..|> SpinEventEndListener

class GenericTextWatcher {
    - editText : EditText
    - errorMsg : String
    - confrimEditText : EditText
    - reasonWhy : String
    + GenericTextWatcher(EditText, String)
    + GenericTextWatcher(EditText, EditText, String)
    + GenericTextWatcher(EditText, String, String)
    + beforeTextChanged(CharSequence, int, int, int)
    + onTextChanged(CharSequence, int, int, int)
    + afterTextChanged(Editable)
    + valid()
    + validateReasonWhy()
}

class MoodListController {
    # context : Context
    # filter : MoodEventListFilter
    # originalMoodEventList : ArrayList<MoodEvent>
    # filteredMoodEventList : ArrayList<MoodEvent>
    # moodAdapter : MoodEventArrayAdapter
    # session : SessionManager
    - view : MoodListActivity
    + MoodListController(Context)
    # initializeArrayAdapter(ArrayList<MoodEvent>, HashMap<String,UserRepository.FollowStatus>)
    - initSlotMachineAd()
    + checkIfSlotMachineAdShouldShow()
    + {abstract} doesBelongInOriginal(MoodEvent) : boolean
    + {abstract} isPosterAllowed(String) : boolean
    + saveFilter()
    + onFollowAdded(Follow)
    + onFollowDeleted(String, String)
    + onFollowRequestAdded(FollowRequest)
    + onFollowRequestDeleted(String, String)
    # shouldUpdateOnFollowStatusUpdate(String, String) : boolean
    + onMoodEventAdded(MoodEvent)
    + onMoodEventDeleted(String)
    + onMoodEventUpdated(MoodEvent)
    # insertMoodEventSortedDateTime(ArrayList<MoodEvent>, MoodEvent)
    # notifyAdapter()
    # handleError(String, Exception)
    + getFilter() : MoodEventListFilter
    + getMoodAdapter() : MoodEventArrayAdapter
}
MoodListController ..|> MoodEventListener
MoodListController ..|> FollowListener
MoodListController ..|> FollowRequestListener

class MoodListView {
    - context : Context
    - isSlotMachineAdOn : Boolean
    + MoodListView(Context)
    + MoodListView(Context, AttributeSet)
    + setAdapter(MoodEventArrayAdapter)
    + setSlotMachineAdOn(Boolean)
}

class AddMoodController {
    - loggedInUser : String
    - context : Context
    + AddMoodController()
    + AddMoodController(Context)
    + onSubmitMood(MoodEvent, Uri, OnSuccessListener<MoodEvent>, OnFailureListener)
    - getImageSize(Uri) : long
    + setLoggedInUser(String)
}

class SessionManager {
    - {static} preferenceName : String
    - {static} isLoggedInKey : String
    - {static} usernameKey : String
    - prefs : SharedPreferences
    - editor : SharedPreferences.Editor
    + SessionManager(Context)
    + saveSession(String)
    + isLoggedIn() : boolean
    + getUsername() : String
    + logout()
}

class FollowRepository {
    - {static} instance : FollowRepository
    + {static} FOLLOW_COLLECTION : String
    - db : FirebaseFirestore
    - followsRef : CollectionReference
    - FollowRepository()
    - FollowRepository(FirebaseFirestore)
    + {static} getInstance() : FollowRepository
    - startListening()
    + {static} setInstanceForTesting(FirebaseFirestore)
    + addFollow(Follow, OnSuccessListener<Follow>, OnFailureListener)
    + getFollow(String, String, OnSuccessListener<Follow>, OnFailureListener)
    + deleteFollow(String, String, OnSuccessListener<Void>, OnFailureListener)
    + isFollowing(String, String, OnSuccessListener<Boolean>, OnFailureListener)
    + {static} getCompoundId(String, String) : String
    - onFollowAdded(Follow)
    - onFollowDeleted(String, String)
}
FollowRepository --|> GenericRepository

class FollowingMoodListController {
    - moodCount : HashMap<String,Integer>
    + FollowingMoodListController(Context, OnSuccessListener<Void>, OnFailureListener)
    - isFollowing(String) : boolean
    - insertInMoodLists(MoodEvent) : boolean
    - removeFromMoodLists(String) : boolean
    + doesBelongInOriginal(MoodEvent) : boolean
    + isPosterAllowed(String) : boolean
    + onMoodEventAdded(MoodEvent)
    + onMoodEventUpdated(MoodEvent)
    + onMoodEventDeleted(String)
    + onFollowAdded(Follow)
    + onFollowDeleted(String, String)
}
FollowingMoodListController --|> MoodListController

class MainActivity {
    # onCreate(Bundle)
}

class Follow {
    - followerUsername : String
    - followedUsername : String
    - timestamp : Timestamp
    + Follow()
    + Follow(String, String)
    + Follow(String, String, Timestamp)
    + getFollowerUsername() : String
    + setFollowerUsername(String)
    + getFollowedUsername() : String
    + setFollowedUsername(String)
    + getTimestamp() : Timestamp
    + setTimestamp(Timestamp)
}

class AuthManager {
    - sessionManager : SessionManager
    + AuthManager(Context)
    + login(String, String, OnSuccessListener<User>, OnFailureListener)
    + signUp(String, String, String, String, OnSuccessListener<User>, OnFailureListener)
    - hashPassword(String) : String
}

class GenericRepository {
    # listeners : Set<Listener>
    - settings : FirebaseFirestoreSettings
    + addListener(Listener) : boolean
    + removeListener(Listener)
    # enableOfflinePersistence(FirebaseFirestore)
    # isNetworkAvailable(Context) : boolean
}

class MoodEventListFilter {
    - minDateTime : Timestamp
    - maxDateTime : Timestamp
    - emotion : Emotion
    - reasonWhyTextKeyword : String
    - sharedLocation : boolean
    + MoodEventListFilter()
    + MoodEventListFilter(Timestamp, Timestamp, Emotion, String, boolean)
    + applyFilter(ArrayList<MoodEvent>) : ArrayList<MoodEvent>
    + wouldBeFiltered(MoodEvent) : boolean
    + getMinDateTime() : Timestamp
    + setMinDateTime(Timestamp)
    + clearMinDateTime()
    + getMaxDateTime() : Timestamp
    + setMaxDateTime(Timestamp)
    + clearMaxDateTime()
    + getEmotion() : Emotion
    + setEmotion(Emotion)
    + clearEmotion()
    + getReasonWhyTextKeyword() : String
    + setReasonWhyTextKeyword(String)
    + clearReasonWhyKeyword()
    + setSharedLocation()
    + clearSharedLocation()
}

class EnhancedMoodActivity {
    - controller : CommentController
    - mood : MoodEvent
    # onCreate(Bundle)
    - populateUI()
    - setUpPhotoDisplay()
    - handleException(Exception)
}

class MoodListActivity {
    # controller : MoodListController
    # moodListView : MoodListView
    - slotMachineAdView : View
    # onCreate(Bundle)
    # onControllerInitialized()
    + showSlotMachineAd(boolean)
    # getActivityLayout() : int
    # handleException(Exception)
    + getSlotMachineAdView() : View
    + getMoodListView() : MoodListView
}
MoodListActivity --|> BaseActivity

class FollowRequestArrayAdapter {
    - context : Context
    - requests : ArrayList<FollowRequest>
    + FollowRequestArrayAdapter(Context, ArrayList<FollowRequest>)
    + getView(int, View, ViewGroup) : View
    - handleException(Exception)
}

class CommentController {
    - commenter : String
    - context : Context
    - commentArrayAdapter : CommentArrayAdapter
    - commentsList : ArrayList<Comment>
    - moodEventToComment : MoodEvent
    + CommentController(MoodEvent, Context, OnSuccessListener<Void>, OnFailureListener)
    + onCommentAdded(Comment)
    - notifyAdapter()
    + getAdapter() : CommentArrayAdapter
    + addComment(String)
}
CommentController ..|> CommentListener

class CommentRepository {
    + {static} COMMENT_COLLECTION : String
    - {static} instance : CommentRepository
    - db : FirebaseFirestore
    - commentsRef : CollectionReference
    - CommentRepository()
    - CommentRepository(FirebaseFirestore)
    + {static} getInstance() : CommentRepository
    + {static} setInstanceForTesting(FirebaseFirestore)
    - startListening()
    + addComment(Comment, OnSuccessListener<Comment>, OnFailureListener)
    + getAllCommentsFromMood(String, OnSuccessListener<ArrayList<Comment>>, OnFailureListener)
    - onCommentAdded(Comment)
}
CommentRepository --|> GenericRepository

class UpdateOrDeleteMoodEventController {
    - session : SessionManager
    - context : Context
    + UpdateOrDeleteMoodEventController(Context)
    + onUpdateMoodEvent(MoodEvent, OnSuccessListener<MoodEvent>, OnFailureListener)
    + onDeleteMoodEvent(MoodEvent, OnSuccessListener<String>, OnFailureListener)
}

interface CommentListener {
    onCommentAdded(Comment)
}

interface MoodEventListener {
    onMoodEventAdded(MoodEvent)
    onMoodEventUpdated(MoodEvent)
    onMoodEventDeleted(String)
}

interface LocationCallback {
    onLocationRetrieved(Location)
}

interface SpinEventEndListener {
    onSpinFinish(int, int)
}

interface FollowListener {
    onFollowAdded(Follow)
    onFollowDeleted(String, String)
}

interface UserListener {
    onUserAdded(User)
}

interface FollowRequestListener {
    onFollowRequestAdded(FollowRequest)
    onFollowRequestDeleted(String, String)
}

enum SlotMachineSymbol {
    BAR
    SEVEN
    ORANGE
    LEMON
    TRIPLE
    WATERMELON
}

enum FollowStatus {
    FOLLOWING
    REQUESTED
    NEITHER
}

enum Emotion {
    ANGER
    CONFUSION
    DISGUST
    FEAR
    HAPPINESS
    SADNESS
    SHAME
    SURPRISE
    LAUGHTER
}

enum SocialSituation {
    ALONE
    ONE_OTHER
    TWO_OR_MORE_OTHERS
    CROWD
}


' Controllers '
AddMoodController --> "Adds" MoodEvent
AddMoodController --> MoodEventRepository

CommentController o-- "1" CommentArrayAdapter
CommentController o-- "1" MoodEvent
CommentController --> "0..*" Comment
CommentController --> CommentRepository

MoodListController o-- "1" MoodEventListFilter
MoodListController o-- "1" MoodEventArrayAdapter
MoodListController --> MoodListActivity
MoodListController --> MoodEventRepository
MoodListController --> "0..*" MoodEvent
MoodListController --> "Launches" SlotMachineActivity

FollowingMoodListController --> FollowRepository

FollowRequestController o-- "1" FollowRequestArrayAdapter
FollowRequestController --> "0..*" FollowRequest
FollowRequestController --> FollowRequestRepository

LocationMoodController --> UserRepository
LocationMoodController --> MoodEventRepository

LoginController --> "Authenticates with" AuthManager
LoginController --> "Logs in" User

SignUpController --> "Signs up with" AuthManager
SignUpController --> "Signs up" User

SearchController o-- "1" SearchResultArrayAdapter
SearchController o-- "0..*" FollowStatus
SearchController --> "0..*" User
SearchController --> UserRepository

UpdateOrDeleteMoodEventController --> MoodEventRepository
UpdateOrDeleteMoodEventController --> "Updates or deletes" MoodEvent


' Models '
MoodEvent o-- "1" Emotion
MoodEvent o-- "1" SocialSituation


' Repositories '
CommentRepository --> "0..*" Comment
CommentRepository --> "Notifies" CommentListener

FollowRepository --> "0..*" Follow
FollowRepository --> "Notifies" FollowListener

FollowRequestRepository --> "0..*" FollowRequest
FollowRequestRepository --> "Notifies" FollowRequestListener

MoodEventRepository --> "0..*" MoodEvent
MoodEventRepository --> "Notifies" MoodEventListener
MoodEventRepository --> MoodImageCache

UserRepository --> "0..*" User
UserRepository --> "Notifies" UserListener


' Utils '
AuthManager --> "Saves session with" SessionManager
CommentArrayAdapter o-- "0..*" Comment
CommentArrayAdapter --> "Launches" UserProfileActivity

FollowRequestArrayAdapter o-- "0..*" FollowRequest
FollowRequestArrayAdapter --> FollowRequestRepository
FollowRequestArrayAdapter --> "Launches" UserProfileActivity

MoodEventArrayAdapter o-- "0..*" MoodEvent
MoodEventArrayAdapter o-- "0..*" FollowStatus
MoodEventArrayAdapter --> "Launches" UserProfileActivity
MoodEventArrayAdapter --> MoodEventRepository
MoodEventArrayAdapter --> "Shows" Emotion
MoodEventArrayAdapter --> "Shows" SocialSituation
MoodEventArrayAdapter --> FollowButton
MoodEventArrayAdapter --> MoodImageCache

SearchResultArrayAdapter o-- "0..*" FollowStatus
SearchResultArrayAdapter --> "0..*" User
SearchResultArrayAdapter --> "Launches" UserProfileActivity

FollowButton o-- "1" FollowStatus
FollowButton --> "Creates" FollowRequest
FollowButton --> FollowRequestRepository
FollowButton --> FollowRepository
FollowButton --> SessionManager

MoodListView o-- "Shows 0..*" MoodEvent
MoodListView --> "Launches" EnhancedMoodActivity

MoodEventListFilter --> "Filters 0..*" MoodEvent


' Views '
BaseActivity --> "Launches" FollowingMoodEventListActivity
BaseActivity --> "Launches" DiscoverActivity
BaseActivity --> "Launches" SearchActivity
BaseActivity --> "Launches" MapActivity
BaseActivity --> "Launches" UserProfileActivity

DiscoverActivity o-- "1" DiscoverController

EnhancedMoodActivity o-- "1" CommentController
EnhancedMoodActivity o-- "Shows details of" MoodEvent
EnhancedMoodActivity --> "Downloads image from" MoodEventRepository
EnhancedMoodActivity --> "Shows" Emotion
EnhancedMoodActivity --> "Shows" SocialSituation
EnhancedMoodActivity --> GenericTextWatcher
EnhancedMoodActivity --> "Launches" UserProfileActivity
EnhancedMoodActivity --> "Launches" UpdateOrDeleteMoodEventActivity
EnhancedMoodActivity --> MoodImageCache

FollowingMoodEventListActivity o-- "1" FollowingMoodListController

FollowRequestsActivity o-- "1" FollowRequestController

LoginActivity o-- "1" LoginController
LoginActivity --> GenericTextWatcher
LoginActivity --> "Launches" SignUpActivity
LoginActivity --> "Launches" FollowingMoodEventListActivity

MainActivity --> "Checks if user is logged in with" SessionManager
MainActivity --> "Launches" LoginActivity
MainActivity --> "Launches" FollowingMoodEventListActivity

MapActivity o-- "1" LocationMoodController
MapActivity o-- "1" LocationController
MapActivity --> "Shows" MoodEvent

MoodAddActivity o-- "1" AddMoodController
MoodAddActivity o-- "1" LocationController
MoodAddActivity o-- "1" Emotion
MoodAddActivity o-- "1" SocialSituation
MoodAddActivity --> GenericTextWatcher
MoodAddActivity --> "Launches" FollowingMoodEventListActivity

MoodListActivity o-- "1" MoodListController
MoodListActivity o-- "1" MoodListView
MoodListActivity --> MoodFilterView

SearchActivity o-- "1" SearchController

SignUpActivity o-- "1" SignUpController
SignUpActivity --> GenericTextWatcher
SignUpActivity --> "Launches" LoginActivity

SlotMachineActivity --o "3" ImageViewScrolling
SlotMachineActivity --> "6" SlotMachineSymbol

UpdateOrDeleteMoodEventActivity o-- "1" UpdateOrDeleteMoodEventController
UpdateOrDeleteMoodEventActivity o-- "1" LocationController
UpdateOrDeleteMoodEventActivity --> "Shows and requests to update" MoodEvent
UpdateOrDeleteMoodEventActivity --> "Launches" FollowingMoodEventListActivity
UpdateOrDeleteMoodEventActivity --> MoodImageCache

UserProfileActivity o-- "1" MoodListController
UserProfileActivity o-- "1" FollowButton
UserProfileActivity o-- "1" MoodListView
UserProfileActivity --> "Launches" MoodAddActivity
UserProfileActivity --> "Launches" LoginActivity
UserProfileActivity --> "Launches" FollowRequestsActivity
UserProfileActivity --> MoodFilterView

MoodFilterView --> FollowButton
MoodFilterView o-- MoodListController

' Notes '
note left of GenericRepository : All repositories\ninteract with the\nFirestore database.
note left of BaseActivity : Handles the navigation menu.
note left of AuthManager : Authenticates with the\ndatabase. Responsible\nfor logging in and signing up.
note left of SessionManager : Manages login information\nlocally. Responsible for\nproviding logged in username,\nsigning out, and saving\nlogged in username.
note left of MoodListActivity : Shows any list\nof mood events.
note left of MoodListController : Handles mood event\narrays for MoodListActivity.\nApplies filters, requests\nmood events, updates\non changes, etc.
note left of MainActivity : Redirects user to\nlogin page if not\nlogged in or to the\nhome page otherwise.
note left of MoodEventListFilter : Stores, modifies, and\napplies a filter to\nan array of mood events.

@enduml
